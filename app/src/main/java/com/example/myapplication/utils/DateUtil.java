package com.example.myapplication.utils;import android.annotation.SuppressLint;import android.text.TextUtils;import java.net.URL;import java.net.URLConnection;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.TimeZone;import java.util.regex.Matcher;import java.util.regex.Pattern;/** * Created by Bobozai09 on 2018/5/31. * 获取系统时间多种方法 */public class DateUtil {    public static String  time_format = "yyyy-MM-dd HH:mm:ss";    public static String  date_time_format = "yyyy-MM-dd HH:mm:ss";    public static String  date_short_format = "yyyy-MM-dd";    public static String  time_short_format = "HH:mm";    /**     * 获取当前时间设置主文件目录     * 2018/05/26 样式文件夹     *     * @return     */    public static final String getSimpleDateToFolder() {        String curTime = "";        SimpleDateFormat formatter;        Date currentDate = new Date();//        yyyy-MM-dd KK:mm:ss a        formatter = new SimpleDateFormat("yyyy/MM/dd/");        currentDate = Calendar.getInstance().getTime();        curTime = formatter.format(currentDate);        return curTime;    }    /**     * 获取当前时间设置主文件目录     * 2018-05-26 样式文件夹     *     * @return     */    public static final String getSimpleDateToStriping() {        String curTime = "";        SimpleDateFormat formatter;        Date currentDate = getNetTime();//        yyyy-MM-dd KK:mm:ss a        formatter = new SimpleDateFormat("yyyy-MM-dd");        curTime = formatter.format(currentDate);        return curTime;    }    /**     * 当前时间 时分     * 2018-05-26  12:12样式文件夹     *     * @return     */    public static final String getYMDHMToStriping() {        String curTime = "";        SimpleDateFormat formatter;        Date currentDate = getNetTime();//        yyyy-MM-dd KK:mm:ss a        formatter = new SimpleDateFormat("yyyy-MM-dd kk:mm");        curTime = formatter.format(currentDate);        return curTime;    }    /**     * @return 将当前时间转换为类似     * 20180526_140503     * 样式文件名类型     */    public static final String getSimpleDateToFile() {        String curTime = "";        SimpleDateFormat formatter;        Date currentDate = new Date();//        yyyy-MM-dd KK:mm:ss a        formatter = new SimpleDateFormat("yyyyMMdd_kkmmss");        currentDate = Calendar.getInstance().getTime();        curTime = formatter.format(currentDate);        return "doc_" + curTime;    }    /**     * 将当前时间转换类型     */    public static final String getSimpleDateToDayTime() {        String curTime = "";        SimpleDateFormat formatter;        Date currentDate = new Date();//        yyyy-MM-dd KK:mm:ss a        formatter = new SimpleDateFormat("yyyy-MM-dd kk:mm:ss");        currentDate = Calendar.getInstance().getTime();        curTime = formatter.format(currentDate);        return curTime;    }    public static Date getNetTime() {        String webUrl = "http://www.ntsc.ac.cn";//中国科学院国家授时中心        try {            URL url = new URL(webUrl);            URLConnection uc = url.openConnection();            uc.setReadTimeout(5000);            uc.setConnectTimeout(5000);            uc.connect();            long correctTime = uc.getDate();            Date date = new Date(correctTime);            return date;        } catch (Exception e) {            return new Date();        }    }    /**     * 将当前时间转换类型     */    public static final String getLongToForStr(Long longTime) {        String curTime = "";        SimpleDateFormat formatter;        Date currentDate = new Date(longTime);//        yyyy-MM-dd KK:mm:ss a        formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        curTime = formatter.format(currentDate);        return curTime;    }    /**     * 将当前时间转换类型     */    public static final String getLongToForStrDAY(Long longTime) {        String curTime = "";        SimpleDateFormat formatter;        Date currentDate = new Date(longTime);//        yyyy-MM-dd KK:mm:ss a        formatter = new SimpleDateFormat("yyyy-MM-dd");        curTime = formatter.format(currentDate);        return curTime;    }    /**     * 时间Str格式互转     */    public static final String dateStrToStr(String oldtype, String newType, String dateStr) {        SimpleDateFormat oldFormatter = new SimpleDateFormat(oldtype);        SimpleDateFormat newFormatter = new SimpleDateFormat(newType);        Date date = null;        String str = "";        try {            date = oldFormatter.parse(dateStr);        } catch (ParseException e) {            e.printStackTrace();        }        if (date != null) {            str = newFormatter.format(date);        }        return str;    }    /**     * 将当前时间转换类型     */    public static final String getCurrentTime(String pattern) {        String curTime = "";        SimpleDateFormat formatter;        Date currentDate = new Date();//        yyyy-MM-dd KK:mm:ss a        formatter = new SimpleDateFormat(pattern);        curTime = formatter.format(currentDate);        return curTime;    }    public static String getTime(Date date, String typeFormat) {//可根据需要自行截取数据显示        SimpleDateFormat format = new SimpleDateFormat(typeFormat);        return format.format(date);    }    public static String getDateFormat(String create_time) {        String format = "";        try {            if (create_time != null && create_time != "NULL" && create_time != "") {                if (isDate(create_time)) {                    format = create_time;                } else {                    //转换日期格式(将Mon Jun 18 2018 00:00:00 GMT+0800 (中国标准时间) 转换成yyyy-MM-dd)                    create_time = create_time.replace("Z", " UTC");                    SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS Z");                    Date d = sdf1.parse(create_time);//Mon Mar 06 00:00:00 CST 2017                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd kk:mm");                    format = sdf.format(d);//2017-03-06                }            }        } catch (ParseException e) {            e.printStackTrace();        }        return format;    }    private static boolean isDate(String date) {        /**         * 判断日期格式和范围         */        String rexp = "^((\\d{2}(([02468][048])|([13579][26]))[\\-\\/\\s]?((((0?[13578])|(1[02]))[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])))))|(\\d{2}(([02468][1235679])|([13579][01345789]))[\\-\\/\\s]?((((0?[13578])|(1[02]))[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\\-\\/\\s]?((0?[1-9])|(1[0-9])|(2[0-8]))))))";        Pattern pat = Pattern.compile(rexp);        Matcher mat = pat.matcher(date);        boolean dateType = mat.matches();        return dateType;    }    /**     * 弹框选择日期 默认选中     */    public static Calendar getSelectTime(Calendar startDate, Calendar endDate, Calendar selectedDate) {        if (startDate.before(selectedDate) && endDate.after(selectedDate)) {            return selectedDate;        } else {            if (selectedDate.after(startDate)) {                if (endDate.before(selectedDate)) {                    return endDate;                } else {                    return selectedDate;                }            } else {                return startDate;            }        }    }    /**     * 获取两个日期之间的间隔天数     *     * @return     */    public static int getGapCount(Date startDate, Date endDate) {        Calendar fromCalendar = Calendar.getInstance();        fromCalendar.setTime(startDate);        fromCalendar.set(Calendar.HOUR_OF_DAY, 0);        fromCalendar.set(Calendar.MINUTE, 0);        fromCalendar.set(Calendar.SECOND, 0);        fromCalendar.set(Calendar.MILLISECOND, 0);        Calendar toCalendar = Calendar.getInstance();        toCalendar.setTime(endDate);        toCalendar.set(Calendar.HOUR_OF_DAY, 0);        toCalendar.set(Calendar.MINUTE, 0);        toCalendar.set(Calendar.SECOND, 0);        toCalendar.set(Calendar.MILLISECOND, 0);        return (int) ((toCalendar.getTime().getTime() - fromCalendar.getTime().getTime()) / (1000 * 60 * 60 * 24));    }    /**     * 获取当前     *     * @return     */    public static String plusDay(String starttime, int num) throws ParseException {        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");        Date startDate = simpleDateFormat.parse(starttime);        ;        System.out.println("开始日期：" + starttime);        Date d = new Date();        Calendar ca = Calendar.getInstance();        ca.setTime(startDate);        ca.add(Calendar.DATE, num);// num为增加的天数，可以改变的        d = ca.getTime();        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");        String enddate = format.format(d);        System.out.println("结束日期：" + enddate);        return enddate;    }    public static String dateToWeek(String datetime) throws ParseException {        SimpleDateFormat f = new SimpleDateFormat("yyyy-MM-dd");        String[] weekDays = {"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"};        Calendar cal = Calendar.getInstance(); // 获得一个日历        Date datet = null;        datet = (Date) f.parse(datetime);        cal.setTime(datet);        int w = cal.get(Calendar.DAY_OF_WEEK) - 1; // 指示一个星期中的某天。        if (w < 0)            w = 0;        System.out.println(weekDays[w]);//星期二        return weekDays[w];    }    // strTime 要转换的String类型的时间    // formatType 时间格式    // strTime的时间格式和formatType的时间格式必须相同    public static long stringToLong(String strTime, String formatType)            throws ParseException {        Date date = stringToDate(strTime, formatType); // String类型转成date类型        if (date == null) {            return 0;        } else {            long currentTime = dateToLong(date); // date类型转成long类型            return currentTime;        }    }    // currentTime 要转换的long类型的时间    // formatType 要转换的string类型的时间格式    public static String longToString(long currentTime, String formatType)            throws ParseException {        Date date = longToDate(currentTime, formatType); // long类型转成Date类型        String strTime = dateToString(date, formatType); // date类型转成String        return strTime;    }    // date 要转换的date类型的时间    public static long dateToLong(Date date) {        return date.getTime();    }    // currentTime 要转换的long类型的时间    // formatType 要转换的时间格式yyyy-MM-dd HH:mm:ss//yyyy年MM月dd日 HH时mm分ss秒    public static Date longToDate(long currentTime, String formatType)            throws ParseException {        Date dateOld = new Date(currentTime); // 根据long类型的毫秒数生命一个date类型的时间        String sDateTime = dateToString(dateOld, formatType); // 把date类型的时间转换为string        Date date = stringToDate(sDateTime, formatType); // 把String类型转换为Date类型        return date;    }    // strTime 要转换的string类型的时间，    // formatType 要转换的格式yyyy-MM-dd HH:mm:ss//yyyy年MM月dd日HH时mm分ss秒，    // strTime的时间格式必须要与formatType的时间格式相同    public static Date stringToDate(String strTime, String formatType)            throws ParseException {        SimpleDateFormat formatter = new SimpleDateFormat(formatType);        Date date = null;        date = formatter.parse(strTime);        return date;    }    // formatType 格式为yyyy-MM-dd HH:mm:ss//yyyy年MM月dd日 HH时mm分ss秒//或者自定义格式    // data Date类型的时间    public static String dateToString(Date data, String formatType) {        return new SimpleDateFormat(formatType).format(data);    }    public static String strToDateFormat(String date) throws ParseException {        if (TextUtils.isEmpty(date)) {            return "";        }        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        formatter.setLenient(false);        Date newDate = formatter.parse(date);        formatter = new SimpleDateFormat("yyyy/MM/dd");        return formatter.format(newDate);    }     //年月日  转中文 年月日    public static String strYmdtoChinese(String date) throws ParseException {        if (TextUtils.isEmpty(date)) {            return "";        }        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        formatter.setLenient(false);        Date newDate = formatter.parse(date);        formatter = new SimpleDateFormat("yyyy年MM月dd日 HH:mm");        return formatter.format(newDate);    }    /**     * 计算某个时间距离当前时间的天数,小时数以及分钟数.     * @param     * @return     */    public static String calculateTime(String startTime) throws ParseException {        String tips = startTime;        Date now = new Date();        SimpleDateFormat sd = new SimpleDateFormat(time_format);        //计算两个时间的毫秒时间差异         Long   l = sd.parse(currentTime()).getTime() - sd.parse(startTime).getTime();        long days =  (l / (1000 * 60 * 60 * 24));        if (days >=2){            tips=strYmdtoChinese(tips);            return tips;        }        if (days > 0 && days<=1){            tips = days + "天前";            return tips;        }        long hours =  (l / (1000 * 60 * 60) - days*24);        if (hours > 0  &&  hours<24){            tips = hours + "小时前";            return tips;        }        long mins =  (l / (1000 * 60)) - days*24*60 - hours*60;        if(mins<1){            return "刚刚";        }else if(mins>1) {            tips = mins + "分钟前";            return tips;        }        return tips;    }    public static String currentTime(){        SimpleDateFormat sdf = new SimpleDateFormat(time_format);        Date date = new Date();        //获取String类型的时间        String currentTime = sdf.format(date);        return currentTime;    }    // 年月日 时分秒 转 年月日 时分    public static String strToDateFormatYmdHmsToYmdHm(String date) throws ParseException {        if (TextUtils.isEmpty(date)) {            return "";        }        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        formatter.setLenient(false);        Date newDate = formatter.parse(date);        formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");        return formatter.format(newDate);    }    // 年月日 时分秒 转 年月日    public static String strToDateFormatYmdHmsToYmd(String date) throws ParseException {        if (TextUtils.isEmpty(date)) {            return "";        }        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        formatter.setLenient(false);        Date newDate = formatter.parse(date);        formatter = new SimpleDateFormat("yyyy-MM-dd");        return formatter.format(newDate);    }    // 年月日 时分秒 转 时分    public static String strToDateFormatYmdHmsToHm(String date) throws ParseException {        if (TextUtils.isEmpty(date)) {            return "";        }        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        formatter.setLenient(false);        Date newDate = formatter.parse(date);        formatter = new SimpleDateFormat("HH:mm");        return formatter.format(newDate);    }    public static String strToDateFormatYmdHmsToMd(String date) throws ParseException {        if (TextUtils.isEmpty(date)) {            return "";        }        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        formatter.setLenient(false);        Date newDate = formatter.parse(date);        formatter = new SimpleDateFormat("MM-dd");        return formatter.format(newDate);    }    /**     * 获取 当前年、半年、季度、月、日、小时 开始结束时间     */    private final static SimpleDateFormat shortSdf = new SimpleDateFormat("yyyy-MM-dd");    private final static SimpleDateFormat longHourSdf = new SimpleDateFormat("yyyy-MM-dd HH");;    private final static SimpleDateFormat longSdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");;    //当天0点    public static Long dayTimeInMillis() {        Calendar calendar = Calendar.getInstance();// 获取当前日期        calendar.set(Calendar.HOUR_OF_DAY, 0);        calendar.set(Calendar.MINUTE, 0);        calendar.set(Calendar.SECOND, 0);        Long time = calendar.getTimeInMillis()/1000;        return time;    }    public static Long dayTime2InMillis() {        Calendar calendar = Calendar.getInstance();// 获取当前日期        calendar.set(Calendar.HOUR_OF_DAY, 23);        calendar.set(Calendar.MINUTE, 59);        calendar.set(Calendar.SECOND, 59);        Long time = calendar.getTimeInMillis()/1000;        return time;    }    /**     * 获得本周的第一天，周一     *     * @return     */    public static Date getCurrentWeekDayStartTime() {        Calendar c = Calendar.getInstance();        try {            int weekday = c.get(Calendar.DAY_OF_WEEK) - 2;            c.add(Calendar.DATE, -weekday);            c.setTime(longSdf.parse(shortSdf.format(c.getTime()) + " 00:00:00"));        } catch (Exception e) {            e.printStackTrace();        }        return c.getTime();    }    /**     * 获得本周的最后一天，周日     *     * @return     */    public static Date getCurrentWeekDayEndTime() {        Calendar c = Calendar.getInstance();        try {            int weekday = c.get(Calendar.DAY_OF_WEEK);            c.add(Calendar.DATE, 8 - weekday);            c.setTime(longSdf.parse(shortSdf.format(c.getTime()) + " 23:59:59"));        } catch (Exception e) {            e.printStackTrace();        }        return c.getTime();    }    /**     * 获得指定日期的指定天数     * @param days     * @return     */    public static String getSpecifiedDayAfter(int days){        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");//设置日期格式        String specifiedDay=df.format(new Date());// new Date()为获取当前系统时间        Calendar c = Calendar.getInstance();        Date date=null;        try {            date = new SimpleDateFormat("yyyy-MM-dd").parse(specifiedDay);        } catch (ParseException e) {            e.printStackTrace();        }        c.setTime(date);        int day=c.get(Calendar.DATE);        c.set(Calendar.DATE,day+days);        String dayAfter=new SimpleDateFormat("yyyy-MM-dd").format(c.getTime());        return dayAfter;    }    /**     * 获得本月的开始时间     *     * @return     */    public static Date getCurrentMonthStartTime() {        Calendar c = Calendar.getInstance();        Date now = null;        try {            c.set(Calendar.DATE, 1);            now = shortSdf.parse(shortSdf.format(c.getTime()));        } catch (Exception e) {            e.printStackTrace();        }        return now;    }    /**     * 本月的结束时间     *     * @return     */    public static Date getCurrentMonthEndTime() {        Calendar c = Calendar.getInstance();        Date now = null;        try {            c.set(Calendar.DATE, 1);            c.add(Calendar.MONTH, 1);            c.add(Calendar.DATE, -1);            now = longSdf.parse(shortSdf.format(c.getTime()) + " 23:59:59");        } catch (Exception e) {            e.printStackTrace();        }        return now;    }    /**     * 当前年的开始时间     *     * @return     */    public static Date getCurrentYearStartTime() {        Calendar c = Calendar.getInstance();        Date now = null;        try {            c.set(Calendar.MONTH, 0);            c.set(Calendar.DATE, 1);            now = shortSdf.parse(shortSdf.format(c.getTime()));        } catch (Exception e) {            e.printStackTrace();        }        return now;    }    /**     * 当前年的结束时间     *     * @return     */    public static Date getCurrentYearEndTime() {        Calendar c = Calendar.getInstance();        Date now = null;        try {            c.set(Calendar.MONTH, 11);            c.set(Calendar.DATE, 31);            now = longSdf.parse(shortSdf.format(c.getTime()) + " 23:59:59");        } catch (Exception e) {            e.printStackTrace();        }        return now;    }    /**     * 当前季度的开始时间     *     * @return     */    public static Date getCurrentQuarterStartTime() {        Calendar c = Calendar.getInstance();        int currentMonth = c.get(Calendar.MONTH) + 1;        Date now = null;        try {            if (currentMonth >= 1 && currentMonth <= 3)                c.set(Calendar.MONTH, 0);            else if (currentMonth >= 4 && currentMonth <= 6)                c.set(Calendar.MONTH, 3);            else if (currentMonth >= 7 && currentMonth <= 9)                c.set(Calendar.MONTH, 4);            else if (currentMonth >= 10 && currentMonth <= 12)                c.set(Calendar.MONTH, 9);            c.set(Calendar.DATE, 1);            now = longSdf.parse(shortSdf.format(c.getTime()) + " 00:00:00");        } catch (Exception e) {            e.printStackTrace();        }        return now;    }    /**     * 当前季度的结束时间     *     * @return     */    public static Date getCurrentQuarterEndTime() {        Calendar c = Calendar.getInstance();        int currentMonth = c.get(Calendar.MONTH) + 1;        Date now = null;        try {            if (currentMonth >= 1 && currentMonth <= 3) {                c.set(Calendar.MONTH, 2);                c.set(Calendar.DATE, 31);            } else if (currentMonth >= 4 && currentMonth <= 6) {                c.set(Calendar.MONTH, 5);                c.set(Calendar.DATE, 30);            } else if (currentMonth >= 7 && currentMonth <= 9) {                c.set(Calendar.MONTH, 8);                c.set(Calendar.DATE, 30);            } else if (currentMonth >= 10 && currentMonth <= 12) {                c.set(Calendar.MONTH, 11);                c.set(Calendar.DATE, 31);            }            now = longSdf.parse(shortSdf.format(c.getTime()) + " 23:59:59");        } catch (Exception e) {            e.printStackTrace();        }        return now;    }    /**     * 时间戳转日期格式     * @param time     * @param format     * @return     */    public static String timeyyDate(long time, String format) {        if (format == null || format.isEmpty()) {            format = "yyyy-MM-dd";        }        SimpleDateFormat sdf = new SimpleDateFormat(format);        return sdf.format(new Date(time*1000));    }    /**     * 获取某个日期前前N天的日期     *     * @param beginDate     * @param distanceDay 前后几天 如获取前7天日期则传-7即可；如果后7天则传7     * @param format      日期格式，默认"yyyy-MM-dd"     * @return     */    public static String getOldDateByDay(Date beginDate, int distanceDay, String format) {        if (format == null || format.isEmpty()) {            format = "yyyy-MM-dd";        }        SimpleDateFormat dft = new SimpleDateFormat(format);        Calendar date = Calendar.getInstance();        date.setTime(beginDate);        date.set(Calendar.DATE, date.get(Calendar.DATE) - distanceDay);        Date endDate = null;        try {            endDate = dft.parse(dft.format(date.getTime()));        } catch (Exception e) {            e.printStackTrace();        }        return dft.format(endDate);    }    /*     * 将时间转换为时间戳     */    @SuppressLint("SimpleDateFormat")    public static long dateToStamp(String s) throws ParseException {        String res;        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");        Date date = simpleDateFormat.parse(s);        long ts = date.getTime();        return ts;    }    public static String stampToHms(Long l){        Date date = new Date(l);        SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss");        format.setTimeZone(TimeZone.getTimeZone("GMT"));        String time = format.format(date);        return time;    }    /*     *未來三十天的日期    */    public static Date getFuturDate(int i){        Date currentDate = new Date();        Date futureDate = new Date(currentDate.getTime() + (i * 24 * 60 * 60 * 1000L));        return futureDate;    }}